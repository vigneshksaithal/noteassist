// src/index.ts
import { zodToJsonSchema } from "zod-to-json-schema";
function getHighlightAPI() {
  if (!globalThis) {
    throw new Error(
      "Your web app must be running in the Highlight app to use this module. Please see https://docs.highlight.ing for more details."
    );
  }
  if (globalThis.highlight === void 0) {
    throw new Error(
      "Your web app must be running in the Highlight app to use this module. Please see https://docs.highlight.ing for more details."
    );
  }
  return globalThis.highlight;
}
function awaitNextTextPrediction(id) {
  const api2 = getHighlightAPI();
  return new Promise((resolve) => {
    const updateDestructor = api2.app.addListener("onTextPredictionUpdate", (message) => {
      if (message.id !== id) {
        return;
      }
      onDone(message.text);
    });
    const doneDestructor = api2.app.addListener("onTextPredictionDone", (message) => {
      if (message.id !== id) {
        return;
      }
      onDone("");
    });
    function onDone(text) {
      updateDestructor();
      doneDestructor();
      resolve(text);
    }
  });
}
var api = {
  appStorage: {
    isHydrated: () => getHighlightAPI().appStorage.isHydrated(),
    whenHydrated: () => getHighlightAPI().appStorage.whenHydrated(),
    all: () => getHighlightAPI().appStorage.all(),
    get: (key) => getHighlightAPI().appStorage.get(key),
    set: (key, value) => getHighlightAPI().appStorage.set(key, value),
    setAll: (value) => getHighlightAPI().appStorage.setAll(value),
    delete: (key) => getHighlightAPI().appStorage.delete(key),
    clear: () => getHighlightAPI().appStorage.clear()
  },
  app: {
    hasDesktopShortcut: () => getHighlightAPI().app.hasDesktopShortcut(),
    requestCreateDesktopShortcut: () => getHighlightAPI().app.requestCreateDesktopShortcut(),
    setBackgroundStatus: (status) => getHighlightAPI().app.setBackgroundStatus(status),
    showNotification: (title, body) => getHighlightAPI().app.showNotification(title, body),
    getHotkey: () => getHighlightAPI().app.getHotkey(),
    addListener: (event, listener) => getHighlightAPI().app.addListener(event, listener),
    openApp: (appId) => getHighlightAPI().app.openApp(appId)
  },
  permissions: {
    requestBackgroundPermission: () => getHighlightAPI().permissions.requestBackgroundPermission(),
    requestClipboardReadPermission: () => getHighlightAPI().permissions.requestClipboardReadPermission(),
    requestScreenshotPermission: () => getHighlightAPI().permissions.requestScreenshotPermission(),
    requestWindowContextPermission: () => getHighlightAPI().permissions.requestWindowContextPermission()
  },
  user: {
    getFacts: () => getHighlightAPI().user.getFacts(),
    getAudio: (longAudio) => getHighlightAPI().user.getAudio(longAudio),
    getAudioForDuration: (duration) => getHighlightAPI().user.getAudioForDuration(duration),
    setAsrRealtime: (isActive) => getHighlightAPI().user.setAsrRealtime(isActive),
    getMicActivity: (lastNumMs) => getHighlightAPI().user.getMicActivity(lastNumMs),
    getScreenshot: () => getHighlightAPI().user.getScreenshot(),
    getEmail: () => getHighlightAPI().user.getEmail(),
    getContext: (paneDetectionEnabled) => getHighlightAPI().user.getContext(paneDetectionEnabled),
    getClipboardContents: () => getHighlightAPI().user.getClipboardContents(),
    getDisplayScreenshots: () => getHighlightAPI().user.getDisplayScreenshots(),
    getWindows: () => getHighlightAPI().user.getWindows(),
    getWindowScreenshot: (windowTitle) => getHighlightAPI().user.getWindowScreenshot(windowTitle),
    getWindowContext: (windowTitle) => getHighlightAPI().user.getWindowContext(windowTitle)
  },
  vectorDB: {
    createTable: (tableName) => getHighlightAPI().vectorDB.createTable(tableName),
    insertItem: (tableName, text, metadata) => getHighlightAPI().vectorDB.insertItem(tableName, text, metadata),
    getAllItems: (tableName) => getHighlightAPI().vectorDB.getAllItems(tableName),
    updateText: (tableName, id, text, metadata) => getHighlightAPI().vectorDB.updateText(tableName, id, text, metadata),
    updateMetadata: (tableName, id, metadata) => getHighlightAPI().vectorDB.updateMetadata(tableName, id, metadata),
    search: (tableName, text, maxResults) => getHighlightAPI().vectorDB.search(tableName, text, maxResults),
    deleteItem: (tableName, id) => getHighlightAPI().vectorDB.deleteItem(tableName, id),
    deleteTable: (tableName) => getHighlightAPI().vectorDB.deleteTable(tableName)
  },
  auth: {
    signIn: () => getHighlightAPI().auth.signIn()
  },
  inference: {
    isSlmCapable: () => getHighlightAPI().inference.isSlmCapable(),
    getTextPredictionSlm: (messages, grammar) => getHighlightAPI().inference.getTextPredictionSlm(messages, grammar),
    getTextPrediction: async function* (messages, params) {
      const api2 = getHighlightAPI();
      const id = await api2.internal.getTextPrediction(messages, params);
      let done = false;
      const destructor = api2.app.addListener("onTextPredictionDone", (message) => {
        if (message.id !== id) {
          return;
        }
        done = true;
      });
      while (!done) {
        const next = await awaitNextTextPrediction(id);
        if (next) {
          yield next;
        }
      }
      destructor();
    },
    getStructuredTextPrediction: async function* (structure, messages, params) {
      const api2 = getHighlightAPI();
      const openApiSchema = zodToJsonSchema(structure);
      const id = await api2.internal.getStructuredTextPrediction(openApiSchema, messages, params);
      let done = false;
      const destructor = api2.app.addListener("onTextPredictionDone", (message) => {
        if (message.id !== id) {
          return;
        }
        done = true;
      });
      while (!done) {
        const next = await awaitNextTextPrediction(id);
        if (next) {
          yield next;
        }
      }
      destructor();
    }
  },
  addEventListener: (event, listener) => {
    getHighlightAPI().addEventListener(event, listener);
  },
  removeEventListener: (event, listener) => {
    getHighlightAPI().removeEventListener(event, listener);
  },
  once: (event, listener) => {
    getHighlightAPI().once(event, listener);
  },
  isRunningInHighlight: () => {
    return globalThis.highlight !== void 0;
  }
};
var src_default = api;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map